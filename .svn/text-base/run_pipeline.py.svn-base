import argparse
import array
import copy
import os
import sys
import glob
from math import sqrt
import subprocess

try:
    import numpy
except ImportError:
    print "ERROR!: numpy not available for import. Please run 'localSetupSFT pyanalysis/1.4_python2.7' and try again"
    exit(1)

def find_filepath(filepath):
    if filepath.startswith("/eos"):
        head, tail = os.path.split(filepath)

        #SampleHandler wants you to pick a directory above the one where your file lives when using EOS
        oneup, dummy = os.path.split(head[:-1])
        return ["--files", oneup, "--inputTag", tail, "--inputEOS"]
    else:
        return ["--files", filepath]

def make_call(filepath, outdirname, config, suffix, treename, isMC=True):
    args = ["xAH_run.py"]
    args += find_filepath(filepath)
    args += ["--config", config]
    args += ["--submitDir", outdirname + "_" + suffix]
    args += ["--treeName", treename]
    args += ["-f"]

    if isMC:
        args += ["--isMC"]

    args += ["direct"]

    return args

def main():

    ops = options()

    if not ops.signal is None:
        print "Running over signal samples"
        subprocess.call(make_call(ops.signal, "signal", ops.config, ops.suffix, ops.treeName))
        
    if not ops.data is None:
        print "Running over data samples"
        subprocess.call(make_call(ops.data, "data", ops.config, ops.suffix, ops.treeName, isMC=False))

    both_tt = False
    if not ops.ttbar_nonhad is None:
        if ops.ttbar_allhad is None:
            print "WARNING: You specified a nonallhad ttbar sample but not an allhad. Outputs will not be combined!"
        else:
            both_tt = True

        print "Running over ttbar nonallhad"
        subprocess.call(make_call(ops.ttbar_nonhad, "ttbar_nonhad", ops.config, ops.suffix, ops.treeName))
        
    if not ops.ttbar_allhad is None:
        if ops.ttbar_nonhad is None:
            print "WARNING: You specified a allhad ttbar sample but not a nonallhad. Outputs will not be combined!"

        print "Running over ttbar allhad"
        subprocess.call(make_call(ops.ttbar_allhad, "ttbar_allhad", ops.config, ops.suffix, ops.treeName))
        
    if not ops.ttbar_mtt is None:
        print "WARNING!: You specified an mtt sliced ttbar sample.\n Make sure stitching is turned on in your config file!"

        print "Running over ttbar mtt slices"
        subprocess.call(make_call(ops.ttbar_mtt, "ttbar_mtt", ops.config, ops.suffix, ops.treeName))
        
    if both_tt:
        print "Hadding ttbar outputs"
        nonhadfiles = glob.glob("ttbar_nonhad_" + ops.suffix + "/hist-*.root")
        allhadfiles = glob.glob("ttbar_allhad_" + ops.suffix + "/hist-*.root")
        call = ["hadd", "-f", os.getcwd() + "/ttbar_comb_" + ops.suffix + ".root"]
        call += nonhadfiles
        call += allhadfiles

        if not ops.ttbar_mtt is None:
            mttfiles = glob.glob("ttbar_mtt_" + ops.suffix + "/hist-*.root")
            call += mttfiles
        
        subprocess.call(call)

    if (not ops.data is None) and both_tt:
        print "Running background fit!"
        data_file = glob.glob("data_" + ops.suffix + "/hist-*.root")[0]
        signal_args = ["--signal", "signal_" + ops.suffix]
        call = ["python", "XhhBoosted/scripts/dump_limit_hists.py"]
        if not ops.signal is None:
            call += signal_args

        call += ["--data", data_file]
        call += ["--mc", "ttbar_comb_"+ops.suffix+".root", "--suffix", ops.suffix]
        subprocess.call(call)

    
    
def options():
    parser = argparse.ArgumentParser()
    parser.add_argument("--data", help="String or regex with location of data files")
    parser.add_argument("--signal", help="String or regex with location of signal files")
    parser.add_argument("--ttbar_nonhad", help="String or regex with location of ttbar nonhad files (output is hadded with allhad files)")
    parser.add_argument("--ttbar_allhad", help="String or regex with location of ttbar allhad files (output is hadded with nonallhad files)")
    parser.add_argument("--ttbar_mtt", help="String or regex with location of ttbar mtt slice files (output is hadded with nonallhad and allhad files)")
    parser.add_argument("--suffix", default="test", help="Suffix to be appended to all output directories/files")
    parser.add_argument("--config", default="XhhBoosted/scripts/config_MiniTree.py", help="Config file to use for xAH_run.py")
    parser.add_argument("--treeName", default="XhhMiniNtuple", help="Name of tree to run over")

    return parser.parse_args()

def fatal(message):
    sys.exit("Error in %s: %s" % (__file__, message))

if __name__ == '__main__': 
    main()
